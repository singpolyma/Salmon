<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml">
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc private="Draft" ?>
<!-- Turn into html via:
xml2rfc.tcl draft-panzer-magicsig-00.xml draft-panzer-magicsig-00.html -->
<!-- To remove before final draft: Display internal comments/TODOs, inline -->
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-panzer-magicsig-00" >
  <!-- ***** FRONT MATTER ***** -->
  <front>
    <title abbrev="Magic Signatures">Magic Signatures</title>
    <author fullname="John Panzer" initials="J.P." role="editor" surname="Panzer">
      <organization>Google Inc.</organization>
      <address>
        <postal>
          <street>1600 Ampitheatre Parkway</street>
          <!-- Reorder these if your country does things differently -->
          <city>Mountain View</city>
          <region>CA</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone/>
        <email>jpanzer@google.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="Ben Laurie" initials="B.L." surname="Laurie">
      <organization>Google Inc.</organization>
    </author>
    <date month="February" year="2010"/>
    <!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>signatures</keyword>
    <keyword>PKI</keyword>
    <abstract>
      <t>This document defines a lightweight, robust mechanism for digitally signing nearly 
         arbitrary messages,
         along with a basic public key infrastructure for discovering the signing keys.</t>
      <t>It is intended to be a building block in the construction of other protocols, providing
         a commonly agreed upon abstraction layer on top of lower level protocols such as 
         <xref target="LRDD">Webfinger/LRDD</xref>, <xref target="XRD">XRD</xref>, 
         and <xref target="RFC3447">PKCS</xref>.</t>
    </abstract>
  </front>
  <middle>
    <section title="Introduction">
      <t>The primary goal of Magic Signatures is to enable lightweight and robust public key signing 
         for messages that may be transformed, converted, stored, and reconstituted in arbitrary ways.  
         In order to make this mechanism useful, it also defines a public key discovery protocol that enables 
         recipients to reliably map between pseudonyms for authors and their corresponding public keys.</t>
      <t>This mechanism is an alternative to XML-DSig.  In the field, XML-DSig has proven to be problematic
         in applications such as syndication of feeds.  Compared to XML-DSig, Magic Signatures offers 
         the following features:
         <list style="numbers"><t>Can handle any data format; not tied to XML.</t><t>Does not require any canonicalization beyond removal of whitespace, so it is much easier
              to verify messages correctly.</t><t>Can survive message disassembly, storage into arbitrary systems, and 
              re-constitution without invalidating the signature.</t><t>Significantly smaller and simpler specification.</t></list>
         Magic Signatures does not attempt to address every XML-DSig use case, so it is best
         described as a lightweight, robust, and minimal form of digital signatures that can be used
         and deployed where XML-DSig cannot be relied on.  Note that for XML, it is possible to combine both 
         mechanisms.
      </t>
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>
    <section anchor="definitions" title="Definitions">
      <t>
        <list style="hanging">
          <t hangText="Signature:">A digital signature that provably binds a message to a signer's keypair.</t>
          <t hangText="Signer:">In this specification, an arbitrary identifier associated with a keypair
              used in a signature.</t>
          <t hangText="Public Key Infrastructure (PKI)">A set of hardware, software, people, policies, and 
              procedures needed to create, manage, distribute, use, store, and revoke digital certificates.
              This specification uses a very simple, limited PKI.</t>
        </list>
      </t>
    </section>
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>
    <section title="Magic Envelope Definition">
      <t>A "Magic Envelope" comprises a message bundled along with a signature for that message, expressed
      as a series of parameters, and serialized as either XML or JSON.  The envelope specifies the data
      to be signed, the MIME type of the data, the transfer encoding, and the signature.</t>
      <section title="Magic Envelope Parameters" anchor="params">
        <t>
        This section describes the semantics of the parameters which are serializion-independent.
        <list style="hanging"><t hangText="data:">The payload covered by the signature, encoded into an ASCII string.  
          This string is guaranteed to be safe to include without escaping as XML text
          and in JSON strings.</t><t hangText="data_type:">The <xref target="RFC2045">MIME</xref> type of the payload prior to encoding.</t><t hangText="encoding:">The encoding used to convert between the MIME type and the "data" string.
          In this specification, encoding MUST be the string "base64url", indicating the url safe base64
          encoding as described in <xref target="RFC4648">RFC 4648</xref>, without trailing padding.  All
          implementations MUST support this encoding.</t><t hangText="alg:">The algorithm used for the signature.  This specification describes only one 
          signature algorithm, "RSA-SHA256", which all implementations MUST support.</t><t hangText="sig:">The generated signature.  This is a string in the base64url encoded format as described
          above.  It is generated according to "Signing Messages" [ref], and verified according to 
          "Verifying Messages" [ref]</t></list>
        <cref anchor="TODO1" source="JP">Per benl, should the signature also cover the type, encoding, and algorithm parameters?
        This adds to complexity of signing and verifying.  The MIME type is probably the most important given that the other
        parameters are essentially hard coded constants at this point; I imagine there are attacks that involve modifying the
        MIME type though.  So this probably needs fixing.</cref>

        <cref anchor="TODO2" source="JP">Per benl, should be MIME types be text/*?  Following the example of Atom and JSON, which
        both use application/*, I think the existing draft is correct; but open to other opinions.</cref>
        </t>
      </section>
      <section title="The XML Serialization">
        <t>A Magic Envelope XML Document is defined in terms of the XML Information Set, 
        serialized as XML 1.0 [W3C.REC-xml-20040204] and identified with the 
        "application/magic-envelope+xml" media type. Magic Envelope XML Documents MUST be 
        well-formed XML. This specification does not define a DTD, and thus does not require validity 
        (in the sense used by XML).</t>
        <t>When used as a standalone XML document, the root element MUST be me:env.  When incorporated
        as a subtree of another XML document, the root of the subtree MAY be either me:env or me:provenance.
        The me:provenance form indicates that the data is intended for verification of its sibling DOM nodes; 
        the me:env form merely adds a signed envelope to the DOM without implying any particular semantics.</t>
        <t>The parameters are mapped to XML elements and attributes as follows.  Each parameter MUST appear
        exactly once per envelope.</t>
        <t><list style="hanging"><t hangText="The &lt;me:data&gt; element (REQUIRED):">Contains the "data" payload, an ASCII string, as 
            described in
            <xref target="params"/>.  The element contains one REQUIRED attribute, "type",
            which contains the value of the "data_type" parameter.
          </t><t hangText="The &lt;me:encoding&gt; element (REQUIRED):">Contains the value of the "encoding" parameter.</t><t hangText="The &lt;me:alg&gt; element (REQUIRED):">Contains the value of the "alg" parameter.</t><t hangText="The &lt;me:sig&gt; element (REQUIRED):">Contains the value of the "sig" parameter, an ASCII string.</t></list>
        Additional elements not defined by this specification MAY appear as children of the me:env
        or me:provenance elements, but MUST NOT appear as children of any other element.  Processors MUST ignore
        elements they do not understand.</t>
        <t>Example:      
          <figure><artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>
<me:env xmlns:me='http://salmon-protocol.org/ns/magic-env'>
  <me:data type='application/atom+xml'>
    PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz4KPGVudHJ5IHhtbG5zPS
    dodHRwOi8vd3d3LnczLm9yZy8yMDA1L0F0b20nPgogIDxpZD50YWc6ZXhhbXBsZS5jb20s
    MjAwOTpjbXQtMC40NDc3NTcxODwvaWQ-ICAKICA8YXV0aG9yPjxuYW1lPnRlc3RAZXhhbX
    BsZS5jb208L25hbWUPHVyaT5hY2N0OmpwYW56ZXJAZ29vZ2xlLmNvbTwvdXJpPjwvYXV0a
    G9yPgogIDx0aHI6aW4tcmVwbHktdG8geG1sbnM6dGhyPSdodHRwOi8vcHVybC5vcmcvc3l
    uZGljYXRpb24vdGhyZWFkLzEuMCcKICAgICAgcmVmPSd0YWc6YmxvZ2dlci5jb20sMTk5O
    TpibG9nLTg5MzU5MTM3NDMxMzMxMjczNy5wb3N0LTM4NjE2NjMyNTg1Mzg4NTc5NTQnPnR
    hZzpibG9nZ2VyLmNvbSwxOTk5OmJsb2ctODkzNTkxMzc0MzEzMzEyNzM3LnBvc3QtMzg2M
    TY2MzI1ODUzODg1Nzk1NAogIDwvdGhyOmluLXJlcGx5LXRvPgogIDxjb250ZW50PlNhbG1
    vbiBzd2ltIHVwc3RyZWFtITwvY29udGVudD4KICA8dGl0bGUU2FsbW9uIHN3aW0gdXBzdH
    JlYW0hPC90aXRsZT4KICA8dXBkYXRlZD4yMDA5LTEyLTE4VDIwOjA0OjAzWjwvdXBkYXRl
    ZD4KPC9lbnRyeT4KICAgIA
  </me:data>
  <me:encoding>base64url</me:encoding>
  <me:alg>RSA-SHA256</me:alg>
  <me:sig>
    EvGSD2vi8qYcveHnb-rrlok07qnCXjn8YSeCDDXlbhILSabgvNsPpbe76up8w63i2f
    WHvLKJzeGLKfyHg8ZomQ
  </me:sig>
</me:env>
		]]></artwork></figure>
        </t>
      </section>
      <section title="The JSON Serialization">
        <t>Magic Envelope JSON MUST be well formed JSON as defined in <xref target="RFC4627"/>.  The parameters are serialized into
         a JSON object as a sequence of name/value pairs, using the parameter names "data", "data_type", "encoding", 
         "alg", and "sig" directly.  These values MUST be represented as JSON strings.
         The value of each name/value pair is a JSON string containing the corresponding parameter's string value.</t>
        <t>Additional name/value pairs MAY appear within the JSON object and processors MUST ignore elements they
         do not understand.</t>
        <t>Example:      
          <figure><artwork><![CDATA[
{
  "data": "
    PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz4KPGVudHJ5IHhtbG5zPS
    dodHRwOi8vd3d3LnczLm9yZy8yMDA1L0F0b20nPgogIDxpZD50YWc6ZXhhbXBsZS5jb20s
    MjAwOTpjbXQtMC40NDc3NTcxODwvaWQ-ICAKICA8YXV0aG9yPjxuYW1lPnRlc3RAZXhhbX
    BsZS5jb208L25hbWUPHVyaT5hY2N0OmpwYW56ZXJAZ29vZ2xlLmNvbTwvdXJpPjwvYXV0a
    G9yPgogIDx0aHI6aW4tcmVwbHktdG8geG1sbnM6dGhyPSdodHRwOi8vcHVybC5vcmcvc3l
    uZGljYXRpb24vdGhyZWFkLzEuMCcKICAgICAgcmVmPSd0YWc6YmxvZ2dlci5jb20sMTk5O
    TpibG9nLTg5MzU5MTM3NDMxMzMxMjczNy5wb3N0LTM4NjE2NjMyNTg1Mzg4NTc5NTQnPnR
    hZzpibG9nZ2VyLmNvbSwxOTk5OmJsb2ctODkzNTkxMzc0MzEzMzEyNzM3LnBvc3QtMzg2M
    TY2MzI1ODUzODg1Nzk1NAogIDwvdGhyOmluLXJlcGx5LXRvPgogIDxjb250ZW50PlNhbG1
    vbiBzd2ltIHVwc3RyZWFtITwvY29udGVudD4KICA8dGl0bGUU2FsbW9uIHN3aW0gdXBzdH
    JlYW0hPC90aXRsZT4KICA8dXBkYXRlZD4yMDA5LTEyLTE4VDIwOjA0OjAzWjwvdXBkYXRl
    ZD4KPC9lbnRyeT4KICAgIA",
  "data_type": "application/atom+xml",
  "encoding": "base64url",
  "alg": "RSA-SHA256",
  "sig": "
    EvGSD2vi8qYcveHnb-rrlok07qnCXjn8YSeCDDXlbhILSabgvNsPpbe76up8w63i2f
    WHvLKJzeGLKfyHg8ZomQ"
}
          ]]></artwork></figure>
        </t>
      </section>
    </section>
    <section title="Provenance in Atom Entries">
      <t>Magic Envelope parameters may be embedded within an Atom Entry to provide verifiable provenance.  In this case
      the Magic Envelope elements are contained within an "me:provenance" root element to signal their purpose.</t>
      <t>Example:
        <figure><artwork><![CDATA[

<?xml version="1.0" encoding="utf-8"?>
<entry xmlns="http://www.w3.org/2005/Atom">
  <id>tag:example.com,2009:3897938434</id>  
  <author><name>E. Xample</name><uri>acct:test@example.com</uri></author>
  <content>Verify this content via me:provenance.</content>
  <title>A verifiable entry.</title>
  <updated>2009-12-18T20:04:03Z</updated>
  <me:provenance xmlns:me="http://salmon-protocol.org/ns/magic-env">
    <me:data type='application/atom+xml'>
    PD94bWwgdmVyc2lvbj0nMS4wJyBlbmNvZGluZz0nVVRGLTgnPz4KPGVudHJ5IHhtbG5zPS
    dodHRwOi8vd3d3LnczLm9yZy8yMDA1L0F0b20nPgogIDxpZD50YWc6ZXhhbXBsZS5jb20s
    MjAwOTpjbXQtMC40NDc3NTcxODwvaWQ-ICAKICA8YXV0aG9yPjxuYW1lPnRlc3RAZXhhbX
    BsZS5jb208L25hbWUPHVyaT5hY2N0OmpwYW56ZXJAZ29vZ2xlLmNvbTwvdXJpPjwvYXV0a
    G9yPgogIDx0aHI6aW4tcmVwbHktdG8geG1sbnM6dGhyPSdodHRwOi8vcHVybC5vcmcvc3l
    uZGljYXRpb24vdGhyZWFkLzEuMCcKICAgICAgcmVmPSd0YWc6YmxvZ2dlci5jb20sMTk5O
    TpibG9nLTg5MzU5MTM3NDMxMzMxMjczNy5wb3N0LTM4NjE2NjMyNTg1Mzg4NTc5NTQnPnR
    hZzpibG9nZ2VyLmNvbSwxOTk5OmJsb2ctODkzNTkxMzc0MzEzMzEyNzM3LnBvc3QtMzg2M
    TY2MzI1ODUzODg1Nzk1NAogIDwvdGhyOmluLXJlcGx5LXRvPgogIDxjb250ZW50PlNhbG1
    vbiBzd2ltIHVwc3RyZWFtITwvY29udGVudD4KICA8dGl0bGUU2FsbW9uIHN3aW0gdXBzdH
    JlYW0hPC90aXRsZT4KICA8dXBkYXRlZD4yMDA5LTEyLTE4VDIwOjA0OjAzWjwvdXBkYXRl
    ZD4KPC9lbnRyeT4KICAgIA
    </me:data>
    <me:encoding>base64url</me:encoding>
    <me:alg>RSA-SHA256</me:alg>
    <me:sig>
    EvGSD2vi8qYcveHnb-rrlok07qnCXjn8YSeCDDXlbhILSabgvNsPpbe76up8w63i2f
    WHvLKJzeGLKfyHg8ZomQ
    </me:sig>
  </me:provenance>
</entry>
        ]]></artwork></figure>
      </t>
    </section>
    <section title="Provenance in JSON Data Structures">
      <t>A Magic Envelope JSON data structure may be embedded within any JSON structure.  When this is done
      to verify the provenance of associated data by augmenting an existing object, the object SHOULD
      use the key name "provenance" for the object containing the Magic Envelope fields.</t>
    </section>
    <section title="Standalone Magic Envelope Messages">
      <t>The application/magic-envelope+{atom,json} data structures MAY be used standalone, as a drop-in replacement
      for the data that is encoded in the data element.  This would be appropriate where the recipient understands 
      the Magic Envelope specification and can automatically decode the data to recover the original format.
      For example, instead of POSTing an application/atom+xml type entry to create a new blog post, a client
      could POST an application/magic-envelope+xml with data of type application/atom+xml.</t>
      <section title="Syndicating Magic Envelope Messages">
        <t>It may be useful to syndicate Atom entries which have been enveloped and signed.  This can be done in
        two ways:  By adding a me:provenance element to the existing Atom entry and essentially duplicating
        its content in a signed me:data element, or by completely replacing each signed Atom entry with the
        corresponding me:env element.</t>
        <t>Feed processors who understand Magic Signatures SHOULD treat me:env elements which verify correctly
        as if the underlying Atom entry had been sent.  The semantics of me:env elements whose signatures cannot
        be verified are undefined by this specification; processors MAY ignore them, produce an error, attach a
        warning, or perform other actions as required by their security model.
        <cref anchor="TODO5" source="JP">Talk about security models somewhere; clearly delineate where this spec leaves
        off and referencing specs need to provide a model.</cref>
        </t>
      </section>
    </section>
    <section title="Encoding of data and sig using base64url" anchor="encoding">
      <t>The data and sig fields of a Magic Envelope are encoded as armored ASCII strings using
      a procedure chosen to be robust in the face of various types of transports and storage systems.
      Specifically, the encoded form is safe to include directly as text in XML, a string in JSON, 
      a parameter in URLs, or as form data, without escaping.  This section defines the mapping between 
      arbitrary binary data (a stream of octets) and the armored form (an ASCII string). 
      The ASCII string is also chosen so as to be a valid and equivalent UTF-8 string.</t>
      <section title="Encoding">
        <t>
          The basic procedure is to use the URL and Filename safe variant of the base64 encoding as described in
          <xref target="RFC4648">RFC 4648</xref>, section 5, and skipping any trailing padding
          as described in section 3.2: 
          <list style="numbers"><t>Base64url encode the binary data.</t><t>Remove all '=' (0x3D) padding characters from the result.</t></list>
          The result is a string that consists only of the ASCII alphanumeric characters along with
          '-' and '_'.  In regular expression form, this is "^[A-Za-z0-9\-_]*$".  This is the normalized
          form of the encoded data, and is the octet sequence that is used to generate the digital
          signature.  Implementations and transports MAY add arbitrary whitespace (ASCII values 0x09-0x0D and 0x20) 
          anywhere in this string after signing but before output so as to, e.g., comply with line length 
          restrictions in certain environments.
        </t>
      </section>
      <section title="Decoding">
        <t>
          The basic procedure is the reverse of encoding, with the additional step that whitespace from the
          input should be ignored.  This is necessary for robustness because some transports may insert
          whitespace, and is useful to allow for human readable formatting of documents in any case.
          <list style="numbers"><t>Normalize the string by removing all whitespace characters from input.</t><t>Pad the resulting string with trailing '=' (0x3D) characters to make its length evenly 
            divisible by 4.</t><t>Base64url decode the resulting string to produce the original binary data.</t></list>
        </t>
      </section>
    </section>
    <section title="Signing Messages">
      <t>Signing a message consists of signing the contents of "data" using the "alg".  This specification
      defines only the "RSA-SHA256" algorithm, meaning the RSASSA-PKCS1-v1_5 signature algorithm from 
      <xref target="RFC3447">RFC 3447</xref> section 8.2, also known as PKCS#1, using SHA-256 as the hash
      function for EMSA-PKCS1-v1_5.

        <cref anchor="TODO3" source="JP">Per benl, changed to specify SHA256.  Not sure if this means
        the formal algorithm name should change to RSASSA-PKCS1-v1_11 from RSASSA-PKCS1-v1_5.  Sample
        code needs updating to match.</cref>

      </t>
      <t>The signature is computed as signature_octets = RSASSA-PKCS1-V1_5-SIGN (K, M), where K is the
      private signing key and M is the exact armored string for "data" produced by [Ref encoding section].</t>
      <t>The signature is then encoded as in [Ref encoding section] and the resulting ASCII armored string
      stored in "sig".</t>
    </section>
    <section title="Verifying Messages">
      <t>Verifying a message consists of verifying that "sig" is a valid signature for "data" using "alg".
      This specification defines only the "RSA-SHA256" verification algorithm, meaning the RSASSA-PKCS1-v1_5 
      verification algorithm from <xref target="RFC3447">RFC 3447</xref> section 8.2.1.</t>
      <t>The verification is performed by executing RSASSA-PKCS1-V1_5-VERIFY ((n, e), M, S), where (n ,e)
      comprise the public key, M is the normalized armored string for "data" produced by [Ref decoding section],
      and S is the decoded value of "sig".</t>
      <t>The scope of the verification covers only the contents of the Magic Envelope itself.  In some
      cases, e.g., when using envelope data as provenance for enclosing data, the decoded "data" value
      must be checked against or override the enclosing data.  A secure if lossy mechanism 
      is to throw away the enclosing information and replace it with the output of the decoded "data".
      Another altnernative is to compare trees, override with signed information where there are conflicts,
      and annotate signed parts.  The correct mechanism depends on the security model required by the processor
      and is outside the scope of this specification.</t>
      <t>The public key (n, e) is obtained using the simple public key infrastructure described by 
      <xref target="spki"/>.</t>
    </section>
    <section title="Simple Public Key Infrastructure" anchor="spki">
      <t>This section defines a public key infrastructure based on URI discovery, as defined in [ref LRDD].
      Specifically, given a URI such as "acct:bob@example.com" or "http://example.com/bob", the corresponding 
      public key(s) for that identifier can be found via LRDD discovery for links of type rel="magic-public-key".  
      This specification defines a new MIME type for simple RSA public key(pairs).</t>
      <section title="The application/magic-key MIME type">
        <t>The application/magic-key format is a very minimal format for representing public key data.
        It consists of a string of ASCII text, separated into 3 or 4 components, with components separated 
        by a "." (0x2E) character.  The first component is the key type; this specification only defines
        the "RSA" key type for future upgradeability.  Thus a magic key consists of the string 
        RSA.modulus(n).exponent(e)[.private_exponent(d)], where the private_exponent
        is optional and only present for public/private keypairs.  Public keys consist of the pair (n, e)
        needed as input to RSASSA-PKCS1-V1_5-VERIFY.</t>
        <t>Each of the components is first represented as an integer in network byte order (big endian) and
        encoded via the "base64url" mechanism described in <xref target="params"/>.

          <cref anchor="TODO4" source="JP">Per benl, private keys often include extra information for efficiency;
          I'm not nearly as worried about the private key format except that we need something interoperable
          for testing, but it might be worth specifying something more here.</cref>

        </t>
      </section>
      <section title="Discovery">
        <t>This section defines how to map from a URI based identifier to a public signing key for that 
        identifier.  Though the exact mechanism for a verifier to determine the identifier of the signer
        is outside the scope of this specification, the identifier MUST appear within the "data" parameter
        and therefore be covered by the signature.  Many existing formats contain authorship or sender
        fields and these SHOULD be used or extended.  Specifications which rely on this one for digital
        signatures MUST specify a format-dependent model for unambiguously determining the signer's URI
        within the signed data.  This specification describes the subsequent step:
        How to take a general URI and map it to a public signing key.

          <cref anchor="TODO6" source="JP">There should most likely be a way to do multiple signatures over a single
          blob, as well as some generic way to disambiguate which key to use within the signature, but this 
          needs some security scrutiny as well and hopefully is a superset of the single-signer, single-key
          case that involves relaxing some constraints and re-reviewing pieces of the security.</cref>

        </t>
        <t>Given an identifier such as acct:bob@example.com or http://example.org/, first perform discovery
        per <xref target="LRDD">LRDD</xref>.  Once an XRD for the identifier is located, retrieve the href value(s) for
        all links with rel="magic-public-key".  Each identified resource is a valid public signing key.</t>
        <t>Note that the data: URI scheme MAY be used, so that a public key can be embedded completely within
        an XRD file (and covered by its security).</t>
        <t>Example: href="data:application/magic-public-key;,RSA.mVgY8RN6URBTstndvmUUPb4UZTdwvwmddSKE5z_jvKUEK6yk1u3rrC9yN8k6FilGj9K0eeUPe2hf4Pj-5CmHww.AQAB"</t>
      </section>
    </section>
    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>TODO.</t>
    </section>
    <!-- Possibly a 'Contributors' section ... -->
    <section anchor="IANA" title="IANA Considerations">
      <t>O keeper of the sacred names and numbers, hear this specification's humble plea for media type registraions.</t>
      <t>The MIME media type for the XML serialization of a Magic Envelope is application/magic-env+xml.</t>
      <t>Type name: application</t>
      <t>Subtype name: magic-env+xml</t>
      <t>Required parameters: n/a</t>
      <t>Optional parameters: n/a</t>
      <t>The MIME media type for the unique JSON serialization of a Magic Envelope is application/magic-env+json, though
         application/json is also appropriate.</t>
      <t>Type name: application</t>
      <t>Subtype name: magic-env+json</t>
      <t>Required parameters: n/a</t>
      <t>Optional parameters: n/a</t>
      <t>The MIME media type for key(pairs) is application/magic-key.</t>
      <t>Type name: application</t>
      <t>Subtype name: magic-key</t>
      <t>Required parameters: n/a</t>
      <t>Optional parameters: n/a</t>
    </section>
    <section anchor="Security" title="Security Considerations">
      <t>TODO.
      See <xref target="RFC3552">RFC 3552</xref> for a guide.</t>
    </section>
  </middle>
  <!--  *****BACK MATTER ***** -->
  <back>
    <!-- References split into informative and normative -->
    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References"><!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      &RFC3552;

      &RFC4648;

      &RFC3447;

      &RFC2045;

      &RFC4627;
     
      <reference anchor="LRDD"
        target="http://tools.ietf.org/html/draft-hammer-discovery-04">
        <front><title>LRDD: Link-based Resource Descriptor Discovery</title>
          <author initials="E" surname="Eran" fullname="Hammer-Lahav">
            <organization/>
          </author>
        </front>
      </reference>

      <reference anchor="XRD" target="http://tools.oasis-open.org/version-control/browse/wsvn/xri/xrd/1.0/drafts/wd13/xrd-1.0-wd13.html"><front><title>Extensible Resource Descriptor (XRD) Version 1.0, Working Draft 13</title><author initials="EHL" surname="Eran" fullname="Hammer-Lahav"><organization/></author><author initials="WN" surname="Will" fullname="Norris"><organization/></author></front></reference>

    </references>
    <references title="Informative References"><!-- Here we use entities that we defined at the beginning. -->

      &I-D.narten-iana-considerations-rfc2434bis;

http://lists.openid.net/pipermail/openid-specs/2009-June/005831.html

    </references>
    <section title="Specification Feedback">
      <t>The primary driver of this specification is the Salmon protocol.
      Feedback on this specification is thus welcomed via the salmon-discuss mailing
      list, salmon-protocol@googlegroups.com.  For more information, see <eref target="http://groups.google.com/group/salmon-protocol">the Salmon discussion
      group</eref>.</t>
    </section>
    <!-- Change Log

  -->
  </back>
</rfc>
